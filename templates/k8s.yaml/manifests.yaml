apiVersion: v1
kind: Service
metadata:
  name: {{name}}
spec:
  ports:
  - port: 80
    targetPort: {{container.port}}
  selector:
    app: {{name}}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: {{name}}
  name: {{name}}
  namespace: {{namespace}}
spec:
  replicas: {{replicas}}
  selector:
    matchLabels:
      app: {{app}}
  strategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: {{name}}
    spec:
      containers:
      - image: {{container.image}}:{{imageTag}}
        imagePullPolicy: Always
        name: {{name}}
        ports:
        - containerPort: {{container.port}}
        livenessProbe:
          initialDelaySeconds: 20
          tcpSocket:
            port: {{container.port}}
          timeoutSeconds: 3
        readinessProbe:
          httpGet:
            path: {{container.readinessPath}}
            port: {{container.port}}
          initialDelaySeconds: 20
          timeoutSeconds: 3
        resources:
          limits:
            cpu: {{container.resources.cpuMax}}
            memory: {{container.resources.memory}}
          requests:
            cpu: {{container.resources.cpuMin}}
            memory: {{container.resources.memory}}
        {{#if container.envSecretRefs}}
        envFrom:
        {{#each container.envSecretRefs}}
        - secretRef:
            name: {{this}}
            optional: false
        {{/each}}
        {{/if}}
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  annotations:
    certmanager.k8s.io/acme-challenge-type: dns01
    certmanager.k8s.io/acme-dns01-provider: route53
    certmanager.k8s.io/cluster-issuer: letsencrypt
    ingress.kubernetes.io/force-ssl-redirect: "true"
    kubernetes.io/ingress.allow-http: "false"
    kubernetes.io/ingress.class: nginx
  name: {{name}}
spec:
  rules:
  - host: {{name}}.{{cluster}}.fareonline.net
    http:
      paths:
      - backend:
          serviceName: {{name}}
          servicePort: {{port}}
        path: /
  tls:
  - hosts:
    - {{name}}.{{cluster}}.fareonline.net
    secretName: {{name}}-tls
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: {{name}}
spec:
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
  podSelector:
    matchLabels:
      app: {{name}}